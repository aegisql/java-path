options
{
  JDK_VERSION = "1.8";
  IGNORE_CASE=false;
  VISITOR=true;
  MULTI=true;
//  DEBUG_PARSER=true;
//  DEBUG_LOOKAHEAD=true ;
//  FORCE_LA_CHECK=true;
//  DEBUG_TOKEN_MANAGER=true;
  UNICODE_INPUT=true;
}

PARSER_BEGIN(CCJavaPathParser)
package com.aegisql.java_path.parser;

import com.aegisql.java_path.TypedValue;
import com.aegisql.java_path.TypedPathElement;
import java.util.LinkedList;
import java.util.stream.Collectors;

public class CCJavaPathParser {}

PARSER_END(CCJavaPathParser)

TOKEN :
{
  <K_LBRACE: "{">
| <K_RBRACE: "}">
| <K_LPARENTHESIS : "(">
| <K_RPARENTHESIS : ")">
| <K_DOT: ".">
| <K_COMMA: ",">
| <K_SPACE: ([" ","\t","\n","\r"])+>
| < #LETTER: ["a"-"z","A"-"Z"] >
| < #DIGIT: ["0"-"9"] >
| < #SPECIAL: ["_","$","-",">"] >
| <K_BACK_REF_ELEMENT : "#"(<DIGIT> )*>
| < K_TYPE_ELEMENT: ((<LETTER>|<DIGIT>|<SPECIAL> )+ ( <K_DOT> (<LETTER> | <DIGIT>|<SPECIAL> )+ )* <K_SPACE>) >
| < K_PATH_ELEMENT: ( ~["'","\""," ","\t",".",",","{","}","(",")","\\"] )+ >
| <K_QUOTED_STRING: "\"" ( (~["\"","\\"]) | ("\\" ( ["n","t","b","r","f","\\","\""] ) ) )* "\"">
| <K_SINGLE_QUOTED_STRING: "\'" ( (~["\'","\\"]) | ("\\" ( ["n","t","b","r","f","\\","\'"] ) ) )* "\'">
}

void comma() :
{}
{
    <K_COMMA>
}

void lBrace() #void:
{}
{
    <K_LBRACE>
}

void rBrace() :
{}
{
    <K_RBRACE>
}

/** Root production. */
SimpleNode fullPath() :
{
    String type = null;
}
{
    (
        <K_LPARENTHESIS> [type = fullType()] typedPathElement() <K_RPARENTHESIS>
        |
        typedPathElement()
    ) [<K_DOT> fullPath() ]
    <EOF>
    {
        jjtThis.jjtSetValue(type);
        return jjtThis;
    }

}

void path() #void:
{
}
{
    typedPathElement() [<K_DOT> typedPathElement() ]
}

void typedPathElement() #void:
{}
{
    pathElement() [lBrace() parameters() rBrace() ]
}

void pathElement() :
{
    Token t = null;
}
{
    t = <K_PATH_ELEMENT>
    {
        jjtThis.jjtSetValue(t.image);
    }
}

String fullType() #void:
{
    Token t = null;
}
{
    t = <K_TYPE_ELEMENT>
    {
        return t.image.trim();
    }
}

TypedValue backRef() #void:
{
    Token t = null;
}
{
    t = <K_BACK_REF_ELEMENT> [<K_DOT> path() ]
    {
        TypedValue tv = new TypedValue();
        String numStr = t.image;
        if("#".equals(numStr)) {
            tv.setBackRef(-1);
        } else {
            tv.setBackRef(Integer.valueOf(numStr.substring(1)));
        }
        tv.setValue(numStr);
        return tv;
    }
}

TypedValue forwardRef() #void:
{
    String type = null;
    String value = null;
}
{
    (
        LOOKAHEAD(fullType() parameter() )type = fullType() value = parameter()
        |
        value = parameter()
    )
    {
        TypedValue tv = new TypedValue();
        tv.setType(type);
        tv.setValue(value);
        tv.setBackRef(-1);
        return tv;
    }
}

void parameters() :
{
    String type = null;
    String value = null;
    TypedValue tv = null;
}
{
    (
        tv = backRef()
        |
        tv = forwardRef()
    ) [comma() parameters() ]
    {
        jjtThis.jjtSetValue(tv);
    }
}

String parameter() #void:
{
    Token t = null;
}
{
    (t = <K_PATH_ELEMENT> | t = <K_QUOTED_STRING> | t = <K_SINGLE_QUOTED_STRING>)
    {
        return t.image;
    }
}
