options
{
  JDK_VERSION = "1.8";
  IGNORE_CASE=false;
  VISITOR=true;
  MULTI=true;
//  DEBUG_PARSER=true;
//  DEBUG_LOOKAHEAD=true ;
//  FORCE_LA_CHECK=true;
//  DEBUG_TOKEN_MANAGER=true;
  UNICODE_INPUT=true;
}

PARSER_BEGIN(CCJavaPathParser)
package com.aegisql.java_path.parser;

import com.aegisql.java_path.TypedValue;
import com.aegisql.java_path.TypedPathElement;
import com.aegisql.java_path.JavaPathRuntimeException;

public class CCJavaPathParser {}

PARSER_END(CCJavaPathParser)

TOKEN :
{
  <K_LPARENTHESIS : "(">
| <K_RPARENTHESIS : ")">
| <K_DOT: ".">
| <K_OR: "||">
| <K_FACTORY_SEPARATOR: "::">
| <K_COMMA: ",">
| <K_SPACE: ([" ","\t"])+>
| <K_PATH_SEPARATOR: ([";","\n"](<K_SPACE>)*)+>
| < #LETTER: ["A"-"Z","_","a"-"z","\u00a2"-"\u00a5","\u00aa","\u00b5","\u00ba",
               "\u00c0"-"\u00d6","\u00d8"-"\u00f6","\u00f8"-"\u021f","\u0222"-"\u0233","\u0250"-"\u02ad",
               "\u02b0"-"\u02b8","\u02bb"-"\u02c1","\u02d0"-"\u02d1","\u02e0"-"\u02e4","\u02ee","\u037a",
               "\u0386","\u0388"-"\u038a","\u038c","\u038e"-"\u03a1","\u03a3"-"\u03ce","\u03d0"-"\u03d7",
               "\u03da"-"\u03f3","\u0400"-"\u0481","\u048c"-"\u04c4","\u04c7"-"\u04c8","\u04cb"-"\u04cc",
               "\u04d0"-"\u04f5","\u04f8"-"\u04f9","\u0531"-"\u0556","\u0559","\u0561"-"\u0587",
               "\u05d0"-"\u05ea","\u05f0"-"\u05f2","\u0621"-"\u063a","\u0640"-"\u064a","\u0671"-"\u06d3",
               "\u06d5","\u06e5"-"\u06e6","\u06fa"-"\u06fc","\u0710","\u0712"-"\u072c","\u0780"-"\u07a5",
               "\u0905"-"\u0939","\u093d","\u0950","\u0958"-"\u0961","\u0985"-"\u098c","\u098f"-"\u0990",
               "\u0993"-"\u09a8","\u09aa"-"\u09b0","\u09b2","\u09b6"-"\u09b9","\u09dc"-"\u09dd",
               "\u09df"-"\u09e1","\u09f0"-"\u09f3","\u0a05"-"\u0a0a","\u0a0f"-"\u0a10","\u0a13"-"\u0a28",
               "\u0a2a"-"\u0a30","\u0a32"-"\u0a33","\u0a35"-"\u0a36","\u0a38"-"\u0a39","\u0a59"-"\u0a5c",
               "\u0a5e","\u0a72"-"\u0a74","\u0a85"-"\u0a8b","\u0a8d","\u0a8f"-"\u0a91","\u0a93"-"\u0aa8",
               "\u0aaa"-"\u0ab0","\u0ab2"-"\u0ab3","\u0ab5"-"\u0ab9","\u0abd","\u0ad0","\u0ae0",
               "\u0b05"-"\u0b0c","\u0b0f"-"\u0b10","\u0b13"-"\u0b28","\u0b2a"-"\u0b30","\u0b32"-"\u0b33",
               "\u0b36"-"\u0b39","\u0b3d","\u0b5c"-"\u0b5d","\u0b5f"-"\u0b61","\u0b85"-"\u0b8a",
               "\u0b8e"-"\u0b90","\u0b92"-"\u0b95","\u0b99"-"\u0b9a","\u0b9c","\u0b9e"-"\u0b9f",
               "\u0ba3"-"\u0ba4","\u0ba8"-"\u0baa","\u0bae"-"\u0bb5","\u0bb7"-"\u0bb9","\u0c05"-"\u0c0c",
               "\u0c0e"-"\u0c10","\u0c12"-"\u0c28","\u0c2a"-"\u0c33","\u0c35"-"\u0c39","\u0c60"-"\u0c61",
               "\u0c85"-"\u0c8c","\u0c8e"-"\u0c90","\u0c92"-"\u0ca8","\u0caa"-"\u0cb3","\u0cb5"-"\u0cb9",
               "\u0cde","\u0ce0"-"\u0ce1","\u0d05"-"\u0d0c","\u0d0e"-"\u0d10","\u0d12"-"\u0d28",
               "\u0d2a"-"\u0d39","\u0d60"-"\u0d61","\u0d85"-"\u0d96","\u0d9a"-"\u0db1","\u0db3"-"\u0dbb",
               "\u0dbd","\u0dc0"-"\u0dc6","\u0e01"-"\u0e30","\u0e32"-"\u0e33","\u0e3f"-"\u0e46",
               "\u0e81"-"\u0e82","\u0e84","\u0e87"-"\u0e88","\u0e8a","\u0e8d","\u0e94"-"\u0e97",
               "\u0e99"-"\u0e9f","\u0ea1"-"\u0ea3","\u0ea5","\u0ea7","\u0eaa"-"\u0eab","\u0ead"-"\u0eb0",
               "\u0eb2"-"\u0eb3","\u0ebd","\u0ec0"-"\u0ec4","\u0ec6","\u0edc"-"\u0edd","\u0f00",
               "\u0f40"-"\u0f47","\u0f49"-"\u0f6a","\u0f88"-"\u0f8b","\u1000"-"\u1021","\u1023"-"\u1027",
               "\u1029"-"\u102a","\u1050"-"\u1055","\u10a0"-"\u10c5","\u10d0"-"\u10f6","\u1100"-"\u1159",
               "\u115f"-"\u11a2","\u11a8"-"\u11f9","\u1200"-"\u1206","\u1208"-"\u1246","\u1248",
               "\u124a"-"\u124d","\u1250"-"\u1256","\u1258","\u125a"-"\u125d","\u1260"-"\u1286","\u1288",
               "\u128a"-"\u128d","\u1290"-"\u12ae","\u12b0","\u12b2"-"\u12b5","\u12b8"-"\u12be","\u12c0",
               "\u12c2"-"\u12c5","\u12c8"-"\u12ce","\u12d0"-"\u12d6","\u12d8"-"\u12ee","\u12f0"-"\u130e",
               "\u1310","\u1312"-"\u1315","\u1318"-"\u131e","\u1320"-"\u1346","\u1348"-"\u135a",
               "\u13a0"-"\u13f4","\u1401"-"\u166c","\u166f"-"\u1676","\u1681"-"\u169a","\u16a0"-"\u16ea",
               "\u1780"-"\u17b3","\u17db","\u1820"-"\u1877","\u1880"-"\u18a8","\u1e00"-"\u1e9b",
               "\u1ea0"-"\u1ef9","\u1f00"-"\u1f15","\u1f18"-"\u1f1d","\u1f20"-"\u1f45","\u1f48"-"\u1f4d",
               "\u1f50"-"\u1f57","\u1f59","\u1f5b","\u1f5d","\u1f5f"-"\u1f7d","\u1f80"-"\u1fb4",
               "\u1fb6"-"\u1fbc","\u1fbe","\u1fc2"-"\u1fc4","\u1fc6"-"\u1fcc","\u1fd0"-"\u1fd3",
               "\u1fd6"-"\u1fdb","\u1fe0"-"\u1fec","\u1ff2"-"\u1ff4","\u1ff6"-"\u1ffc","\u203f"-"\u2040",
               "\u207f","\u20a0"-"\u20af","\u2102","\u2107","\u210a"-"\u2113","\u2115","\u2119"-"\u211d",
               "\u2124","\u2126","\u2128","\u212a"-"\u212d","\u212f"-"\u2131","\u2133"-"\u2139",
               "\u2160"-"\u2183","\u3005"-"\u3007","\u3021"-"\u3029","\u3031"-"\u3035","\u3038"-"\u303a",
               "\u3041"-"\u3094","\u309d"-"\u309e","\u30a1"-"\u30fe","\u3105"-"\u312c","\u3131"-"\u318e",
               "\u31a0"-"\u31b7","\u3400"-"\u4db5","\u4e00"-"\u9fa5","\ua000"-"\ua48c","\uac00"-"\ud7a3",
               "\uf900"-"\ufa2d","\ufb00"-"\ufb06","\ufb13"-"\ufb17","\ufb1d","\ufb1f"-"\ufb28",
               "\ufb2a"-"\ufb36","\ufb38"-"\ufb3c","\ufb3e","\ufb40"-"\ufb41","\ufb43"-"\ufb44",
               "\ufb46"-"\ufbb1","\ufbd3"-"\ufd3d","\ufd50"-"\ufd8f","\ufd92"-"\ufdc7","\ufdf0"-"\ufdfb",
               "\ufe33"-"\ufe34","\ufe4d"-"\ufe4f","\ufe69","\ufe70"-"\ufe72","\ufe74","\ufe76"-"\ufefc",
               "\uff04","\uff21"-"\uff3a","\uff3f","\uff41"-"\uff5a","\uff65"-"\uffbe","\uffc2"-"\uffc7",
               "\uffca"-"\uffcf","\uffd2"-"\uffd7","\uffda"-"\uffdc","\uffe0"-"\uffe1","\uffe5"-"\uffe6"] >
| < #DIGIT: ["0"-"9"] >
| < #SPECIAL: ["_","<","-",">","$"] >
| < #FIRST_LETTER: "@"|"$"|<LETTER> >
| < #PART_LETTER: <LETTER>|<DIGIT>|<SPECIAL> >
| < #IDENTIFIER: <FIRST_LETTER> (<PART_LETTER>)* >
| <K_BACK_REF_ELEMENT : "#"(<DIGIT> )*>
| <K_REF_ELEMENT : "$"(<DIGIT> )*>
| < K_TYPE_ELEMENT: (<IDENTIFIER> ( <K_DOT> <IDENTIFIER> )*( <K_FACTORY_SEPARATOR> <IDENTIFIER> )? <K_SPACE>) >
| < K_PATH_ELEMENT: <IDENTIFIER> >
| < K_STRING: ( ~["'","\""," ","\t","\n","\r",".",",","(",")","\\","|",";"] )+ >
| <K_QUOTED_STRING: "\"" ( (~["\"","\\"]) | ("\\" ( ["n","t","b","r","f","\\","\""] ) ) )* "\"">
| <K_SINGLE_QUOTED_STRING: "\'" ( (~["\'","\\"]) | ("\\" ( ["n","t","b","r","f","\\","\'"] ) ) )* "\'">
}

void comma() :
{}
{
    <K_COMMA>[<K_SPACE> ]
}

void lParenthesis() :
{}
{
    <K_LPARENTHESIS>
}

void rParenthesis() :
{}
{
    <K_RPARENTHESIS>
}

void option() :
{
    Token t = null;
}
{
    ( <K_DOT> | t = <K_OR> )
    {
        jjtThis.jjtSetValue(t != null);
    }
}

void pathSeparator() :
{
}
{
    <K_PATH_SEPARATOR>
}

/** Root production. */
SimpleNode parse() :
{
    TypedPathElement typedPathElement = null;
}
{
    typedPathElement = javaPath() [pathSeparator() [parse() ] ]
    {
        jjtThis.jjtSetValue(typedPathElement);
        return jjtThis;
    }
}

TypedPathElement javaPath() #void:
{
    String type = null;
    Token ref = null;
    TypedPathElement typedPathElement = null;
}
{
    (
        LOOKAHEAD(3) <K_LPARENTHESIS> [type = fullType()] ref = <K_BACK_REF_ELEMENT> <K_RPARENTHESIS><K_DOT> fullPath()
            {
            String root = ref.image;
            if(! ("#".equals(root) || "#0".equals(root)) ) {
                throw new JavaPathRuntimeException("wrong root back reference "+root);
            }
            typedPathElement = new TypedPathElement();
            typedPathElement.setName(root);
            typedPathElement.setType(type);
            }
        |
        ref = <K_BACK_REF_ELEMENT> <K_DOT> fullPath()
            {
            String root = ref.image;
            if(! ("#".equals(root) || "#0".equals(root)) ) {
                throw new JavaPathRuntimeException("wrong root back reference "+root);
            }
            typedPathElement = new TypedPathElement();
            typedPathElement.setName(root);
            }
        |
        fullPath()
    ) [<K_DOT> fullPath() ]
    {
        return typedPathElement;
    }
}


void fullPath() :
{
    String type = null;
}
{
    (
        <K_LPARENTHESIS> [type = fullType()] parametrizedPathElement() <K_RPARENTHESIS>
        |
        parametrizedPathElement()
    ) [option() fullPath() ]
    {
        jjtThis.jjtSetValue(type);
    }
}

String path() #void:
{
    String type = null;
}
{
    (
    lParenthesis() [type = fullType()] parametrizedPathElement() rParenthesis() [<K_DOT> path() ]
    |
    parametrizedPathElement() [<K_DOT> path() ]
    )
    {
        return type;
    }
}

void parametrizedPathElement() #void:
{}
{
    pathElement() [lParenthesis() [parameters()] rParenthesis() ]
}

void pathElement() :
{
    Token t = null;
}
{
    t = <K_PATH_ELEMENT>
    {
        jjtThis.jjtSetValue(t.image);
    }
}

String fullType() #void:
{
    Token t = null;
}
{
    t = <K_TYPE_ELEMENT>
    {
        return t.image.trim();
    }
}

TypedValue backRef() #void:
{
    Token t = null;
    String type = null;
    String factory = null;
}
{
    t = <K_BACK_REF_ELEMENT> [<K_DOT> type = path() ]
    {
    TypedValue tv = new TypedValue();
    String numStr = t.image;
    if("#".equals(numStr)) {
        tv.setBackRefIdx(0);
    } else {
        tv.setBackRefIdx(Integer.valueOf(numStr.substring(1)));
    }
    if(type != null && type.contains("::")) {
        String[] pair = type.split("::",2);
        type = pair[0];
        factory = pair[1];
    }
    tv.setType(type);
    tv.setFactory(factory);
    tv.setValue(numStr);
    return tv;
}
}

TypedValue forwardRef() #void:
{
    String type = null;
    String value = null;
    String factory = null;
}
{
    (
        LOOKAHEAD(fullType() parameter() )type = fullType() value = parameter()
        |
        value = parameter()
    )
    {
        TypedValue tv = new TypedValue();
        if(type != null && type.contains("::")) {
            String[] pair = type.split("::",2);
            type = pair[0];
            factory = pair[1];
        }
        tv.setType(type);
        tv.setFactory(factory);
        tv.setValue(value);
        tv.setBackRefIdx(-1);
        if(value.startsWith("$")) {
            if("$".equals(value)) {
                tv.setValueIdx(0);
            } else {
                tv.setValueIdx(Integer.valueOf(value.substring(1)));
            }
        }
        return tv;
    }
}

void parameters() :
{
    TypedValue tv = null;
}
{
    (
        tv = backRef()
        |
        tv = forwardRef()
    ) [comma() parameters() ]
    {
        jjtThis.jjtSetValue(tv);
    }
}

String parameter() #void:
{
    Token t = null;
}
{
    (
        (t = <K_REF_ELEMENT> [<K_DOT> path() ])
        |
        t = <K_PATH_ELEMENT>
        |
        t = <K_STRING>
        |
        t = <K_QUOTED_STRING>
        |
        t = <K_SINGLE_QUOTED_STRING>
    )
    {
        return t.image;
    }
}
